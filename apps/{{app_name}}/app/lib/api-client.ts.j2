{% if app_framework == 'remix' %}
// Shared typed API client
export async function fetchJson<T>(url: string): Promise<T> {
  const res = await fetch(url);
  if (!res.ok) throw new Error('NetworkError');
  return (await res.json()) as T;
}

{% set domain_list = app_domains.split(',') if app_domains else ['core'] -%}
// Domain-specific API clients
{% for domain in domain_list -%}
export class {{domain | replace('-', '') | title}}Api {
  private basePath = '/api/{{domain}}';

  async get<T>(path: string): Promise<T> {
    return fetchJson<T>(`${this.basePath}${path}`);
  }

  async post<T>(path: string, data: unknown): Promise<T> {
    const res = await fetch(`${this.basePath}${path}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data),
    });
    if (!res.ok) throw new Error('NetworkError');
    return (await res.json()) as T;
  }
}

// Export domain instance
export const {{domain | replace('-', '') | lower}}Api = new {{domain | replace('-', '') | title}}Api();

{% endfor -%}
// <hex-web-client-exports>
// DomainName interface for type safety
export interface DomainName {
  name: string;
  slug: string;
}
{% endif %}

// Shared base API client to centralize fetch and error handling
import { HttpError } from './http-error';

export class BaseApiClient {
  protected basePath: string;

  constructor(basePath: string) {
    this.basePath = basePath;
  }

  protected async fetchJson<T>(path: string, init?: RequestInit): Promise<T> {
    const url = `${this.basePath}${path}`;
    const mergedInit: RequestInit = {
      headers: {
        'Content-Type': 'application/json',
        ...init?.headers,
      },
      ...init,
    };

    if (mergedInit.body && typeof mergedInit.body !== 'string') {
      mergedInit.body = JSON.stringify(mergedInit.body);
    }

    const res = await fetch(url, mergedInit);
    if (!res.ok) {
      const body = await res.text();
      let parsedBody: unknown;
      try {
        parsedBody = JSON.parse(body);
      } catch {
        parsedBody = body;
      }
      throw new HttpError(res.status, res.statusText, parsedBody);
    }

    return (await res.json()) as T;
  }
}

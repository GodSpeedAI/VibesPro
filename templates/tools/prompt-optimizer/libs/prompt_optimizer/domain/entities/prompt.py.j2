"""
{{ project_name }} Prompt Entity

Core domain entity representing a text prompt with metadata and behavior.
Follows DDD principles with rich domain model and encapsulated business logic.
"""

from datetime import datetime
from typing import Optional
from dataclasses import dataclass


@dataclass(frozen=True, kw_only=True)
class Prompt:
    """
    Core domain entity representing a text prompt.

    This entity encapsulates all behavior and invariants related to prompts,
    ensuring they maintain consistency and validity throughout their lifecycle.
    """

    id: str
    content: str
    created_at: datetime
    updated_at: Optional[datetime] = None
    metadata: Optional[dict] = None

    @classmethod
    def create(cls, content: str, metadata: Optional[dict] = None) -> "Prompt":
        """
        Factory method to create a new Prompt entity.

        Args:
            content: The text content of the prompt
            metadata: Optional metadata dictionary

        Returns:
            New Prompt instance

        Raises:
            ValueError: If content is empty or invalid
        """
        if not content or not content.strip():
            raise ValueError("Prompt content cannot be empty")

        if len(content) > 100000:  # Reasonable limit
            raise ValueError("Prompt content too long (max 100,000 characters)")

        import uuid
        now = datetime.utcnow()

        return cls(
            id=str(uuid.uuid4()),
            content=content.strip(),
            created_at=now,
            metadata=metadata or {}
        )

    def update_content(self, new_content: str) -> "Prompt":
        """
        Create a new Prompt instance with updated content.

        Args:
            new_content: The new content for the prompt

        Returns:
            New Prompt instance with updated content

        Raises:
            ValueError: If new content is invalid
        """
        if not new_content or not new_content.strip():
            raise ValueError("Prompt content cannot be empty")

        if len(new_content) > 100000:
            raise ValueError("Prompt content too long (max 100,000 characters)")

        return Prompt(
            id=self.id,
            content=new_content.strip(),
            created_at=self.created_at,
            updated_at=datetime.utcnow(),
            metadata=self.metadata
        )

    def add_metadata(self, key: str, value: any) -> "Prompt":
        """
        Create a new Prompt instance with additional metadata.

        Args:
            key: Metadata key
            value: Metadata value

        Returns:
            New Prompt instance with updated metadata
        """
        new_metadata = dict(self.metadata or {})
        new_metadata[key] = value

        return Prompt(
            id=self.id,
            content=self.content,
            created_at=self.created_at,
            updated_at=self.updated_at,
            metadata=new_metadata
        )

    @property
    def word_count(self) -> int:
        """Get the word count of the prompt content."""
        return len(self.content.split())

    @property
    def character_count(self) -> int:
        """Get the character count of the prompt content."""
        return len(self.content)

    @property
    def is_updated(self) -> bool:
        """Check if the prompt has been updated since creation."""
        return self.updated_at is not None

    def __str__(self) -> str:
        """String representation of the prompt."""
        preview = self.content[:50] + "..." if len(self.content) > 50 else self.content
        return f"Prompt(id={self.id[:8]}..., content='{preview}')"

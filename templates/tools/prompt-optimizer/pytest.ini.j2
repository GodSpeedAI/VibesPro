[tool.pytest.ini_options]
# Pytest configuration for {{ project_name }} prompt optimizer tests

# Test discovery
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Output and reporting
addopts = [
    "-v",                    # Verbose output
    "--tb=short",           # Short traceback format
    "--strict-markers",     # Strict marker checking
    "--strict-config",      # Strict configuration checking
    "--color=yes",          # Colored output
    "--durations=10",       # Show slowest 10 tests
]

# Markers for test categorization
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests for component interactions", 
    "e2e: End-to-end tests for complete workflows",
    "slow: Tests that take longer to execute",
    "database: Tests that require database functionality",
    "cli: Tests that involve CLI functionality",
    "performance: Performance and benchmark tests",
]

# Async support
asyncio_mode = "auto"

# Test filtering
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::RuntimeWarning",
]

# Coverage settings (if pytest-cov is installed)
# Uncomment to enable coverage reporting
# addopts = [
#     "--cov={{ package_path.replace('.', '/') }}",
#     "--cov-report=term-missing",
#     "--cov-report=html:htmlcov",
#     "--cov-fail-under=80",
# ]

# Minimum version requirements
minversion = "7.0"

# Test environment variables
env = [
    "PYTEST_RUNNING = 1",
    "PROMPT_OPTIMIZER_TEST_MODE = 1",
]

# Timeout settings (if pytest-timeout is installed)
# timeout = 300  # 5 minutes default timeout
# timeout_method = "thread"

# Parallel execution (if pytest-xdist is installed)
# addopts = ["-n", "auto"]  # Use all available cores
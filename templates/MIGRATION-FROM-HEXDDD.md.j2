# Migration from HexDDD Project to Merged Platform

**Generated**: {{generation_date}}
**Source Project**: {{source_project_path}}
**Target Project**: {{target_project_path}}

## Overview

This guide provides step-by-step instructions for completing the migration from your HexDDD project to the unified generator-first platform.

## Pre-Migration Analysis

### Project Structure Detected
- **Project Type**: {% if analysis.is_hexddd_project %}HexDDD Project ‚úÖ{% else %}Unknown Project Type ‚ùå{% endif %}
- **Nx Workspace**: {% if analysis.has_nx_config %}Yes ‚úÖ{% else %}No ‚ùå{% endif %}
- **DDD Generators**: {% if analysis.has_ddd_generators %}{{analysis.generators|length}} found ‚úÖ{% else %}None found ‚ùå{% endif %}
- **Domain Libraries**: {{analysis.domain_libraries|length}} found

### Components Migrated

#### Generators Converted
{% for generator in analysis.generators %}
- **{{generator.name}}**: {{generator.template_files|length}} template files
  - Source: `{{generator.path}}`
  - Target: `templates/generators/{{generator.name}}/`
{% else %}
No generators found in source project.
{% endfor %}

#### Domain Libraries Migrated
{% for library in analysis.domain_libraries %}
- **{{library.name}}**: {{library.custom_files|length}} files
  - Components: {% if library.has_entities %}entities{% endif %}{% if library.has_value_objects %}, value objects{% endif %}{% if library.has_aggregates %}, aggregates{% endif %}{% if library.has_services %}, services{% endif %}
  - Source: `{{library.path}}`
  - Target: `templates/libs/{{{{domain_name}}}}/`
{% else %}
No domain libraries found in source project.
{% endfor %}

## Migration Steps Completed

{% for step in migration_plan %}
{{loop.index}}. {{step}}
{% endfor %}

## Post-Migration Validation

### Immediate Next Steps

1. **Test Template Generation**
   ```bash
   cd {{target_project_path}}
   copier copy . /tmp/test-generated-project
   ```

2. **Verify Generated Project Structure**
   ```bash
   cd /tmp/test-generated-project
   ls -la  # Should show familiar HexDDD structure
   ```

3. **Test Build System**
   ```bash
   cd /tmp/test-generated-project
   just build  # or npm run build
   ```

### Validation Checklist

- [ ] **Template Generation**: `copier copy . /tmp/test` succeeds without errors
- [ ] **Build System**: Generated project builds successfully
- [ ] **Domain Logic**: All original business logic is present in templates
- [ ] **Dependencies**: All required packages are included in package.json
- [ ] **Tests**: Test files are templated and can run
- [ ] **Documentation**: README and docs are generated correctly

### Custom Code Review

The following files contain custom business logic that should be reviewed:

{% for library in analysis.domain_libraries %}
#### {{library.name}} Domain
{% for custom_file in library.custom_files %}
- `{{custom_file.relative_to(library.path)}}` ‚Üí `templates/libs/{{{{domain_name}}}}/{{custom_file.relative_to(library.path)}}.j2`
{% endfor %}
{% endfor %}

### Template Customization

You may want to customize the generated templates:

1. **Variable Names**: Review `copier.yml` and adjust variable names for your use case
2. **Conditional Logic**: Add template conditions for optional features
3. **File Structure**: Modify the generated directory structure if needed
4. **Dependencies**: Update package.json template with specific version requirements

## Common Issues and Solutions

### Issue: Template Variables Not Resolving

**Problem**: Variables like `{{project_name}}` appear literally in generated files.

**Solution**: Check that variables are defined in `copier.yml` and properly referenced in templates.

### Issue: Build Failures in Generated Projects

**Problem**: Generated projects fail to build or have missing dependencies.

**Solution**:
1. Check that all dependencies from original `package.json` are included
2. Verify that import paths are correctly templated
3. Ensure build scripts are properly migrated

### Issue: Domain Logic Missing

**Problem**: Some business logic from the original project is not present.

**Solution**:
1. Check the migration log for any skipped files
2. Review custom files list above and ensure all are templated
3. Manually copy any missed files to the appropriate template directories

## Advanced Customization

### Adding New Template Variables

Edit `copier.yml` to add new configuration options:

```yaml
new_feature_enabled:
  type: bool
  help: "Enable the new feature"
  default: false
```

Then use in templates:
```jinja2
{% if new_feature_enabled %}
// New feature code here
{% endif %}
```

### Framework-Specific Templates

Create conditional templates for different frameworks:

```jinja2
{% if framework == 'next' %}
// Next.js specific code
{% elif framework == 'remix' %}
// Remix specific code
{% endif %}
```

### Generator Hooks

Customize the generation process by editing:
- `hooks/pre_gen.py`: Run before template generation
- `hooks/post_gen.py`: Run after template generation (type generation, etc.)

## Migration Quality Assurance

### Regression Testing

Create a test script to validate your migration:

```bash
#!/bin/bash
# test-migration.sh

set -e

echo "Testing template generation..."
copier copy . /tmp/migration-test

echo "Testing build..."
cd /tmp/migration-test
just setup
just build

echo "Testing domain logic..."
just test

echo "‚úÖ Migration validation complete!"
```

### Continuous Integration

Add CI/CD pipeline to test template generation:

```yaml
# .github/workflows/test-templates.yml
name: Test Templates
on: [push, pull_request]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Test template generation
        run: |
          pip install copier
          copier copy . /tmp/test-project --data project_name=test
          cd /tmp/test-project && npm install && npm run build
```

## Support and Documentation

- **Template Documentation**: See `templates/README.md` for template-specific docs
- **Generator Documentation**: Check `templates/generators/*/README.md` for each generator
- **Build System**: Refer to `justfile` for available commands
- **Issue Tracking**: Use GitHub issues for template-related problems

## Migration Complete! üéâ

Your HexDDD project has been successfully migrated to the unified generator-first platform. The new template can be used to generate multiple projects with the same architectural patterns and business logic.

### What You've Gained

- **Consistency**: Generate multiple projects with identical structure
- **Reusability**: Share architectural patterns across teams
- **Flexibility**: Customize projects via template variables
- **Maintainability**: Update all projects by updating the template

### Next Steps

1. Test the template thoroughly with different configurations
2. Share the template with your team
3. Consider contributing improvements back to the community
4. Use the template to generate new projects following your proven patterns

# AI-Enhanced Code Generation Workflow
# Based on MERGE-TASK-007 and TS-MERGE-007 specification

name: AI Code Generation

on:
  workflow_dispatch:
    inputs:
      component_type:
        description: 'Type of component to generate'
        required: true
        type: choice
        options:
          - entity
          - value-object
          - service
          - port
          - adapter
          - use-case
      domain_name:
        description: 'Target domain for the component'
        required: true
        type: string
      component_name:
        description: 'Name of the component to generate'
        required: true
        type: string
      requirements:
        description: 'Requirements and business rules for the component'
        required: true
        type: string
      include_tests:
        description: 'Generate tests along with the component'
        required: false
        type: boolean
        default: true
      include_docs:
        description: 'Generate documentation for the component'
        required: false
        type: boolean
        default: true

jobs:
  ai-generate:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          corepack enable
          pnpm install
          {% if enable_python_backend %}
          uv sync --dev
          {% endif %}

      - name: Initialize AI Context Manager
        run: |
          # Initialize temporal database for AI context
          node -e "
            try {
              const { AIContextManager } = require('./tools/ai/dist/index.js');
              const fs = require('fs');

              const manager = new AIContextManager({
                maxTokens: 8000,
                reservedTokens: 2000,
                cacheSize: 64
              });

              console.log('AI Context Manager initialized successfully');
            } catch (error) {
              console.log('AI Context Manager not available, skipping initialization');
              process.exit(0);
            }
          "

      - name: Gather Domain Context
        id: context
        run: |
          # Collect relevant context for AI generation
          CONTEXT_FILES=(
            "libs/{% raw %}${{ inputs.domain_name }}{% endraw %}/domain/**/*.ts"
            "libs/{% raw %}${{ inputs.domain_name }}{% endraw %}/application/**/*.ts"
            "docs/domains/{% raw %}${{ inputs.domain_name }}{% endraw %}/**/*.md"
            "docs/architectural-decisions/**/*.md"
          )

          echo "domain_context<<EOF" >> "$GITHUB_OUTPUT"
          shopt -s globstar nullglob
          for pattern in "${CONTEXT_FILES[@]}"; do
            count=0
            for file in $pattern; do
              echo "=== $file ==="
              head -50 "$file"
              echo
              count=$((count+1))
              [ "$count" -ge 10 ] && break
            done
          done >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
      - name: Generate Component with AI
        env:
          OPENAI_API_KEY: {% raw %}${{ secrets.OPENAI_API_KEY }}{% endraw %}
          DOMAIN_CONTEXT: {% raw %}${{ steps.context.outputs.domain_context }}{% endraw %}
        run: |
          # Use AI to generate the component
          node -e "
            const fs = require('fs');
            const path = require('path');
            let AIContextManager;
            try {
              ({ AIContextManager } = require('./tools/ai/dist/index.js'));
            } catch (e) {
              console.warn('AI tools not found; writing minimal ai-context.json and skipping generation:', e?.message || e);
              fs.writeFileSync('ai-context.json', JSON.stringify({ tokenCount: 0, relevanceScore: 0, sources: [] }, null, 2));
              process.exit(0);
            }

            async function generateComponent() {
              const manager = new AIContextManager({
                maxTokens: 8000,
                reservedTokens: 2000
              });

              // Register context sources from domain
              const domainPath = 'libs/{% raw %}${{ inputs.domain_name }}{% endraw %}';
              if (fs.existsSync(domainPath)) {
                manager.registerSource({
                  id: 'domain-context',
                  priority: 0.9,
                  tags: ['domain:{% raw %}${{ inputs.domain_name }}{% endraw %}', '{% raw %}${{ inputs.component_type }}{% endraw %}'],
                  async getContent() {
                    return process.env.DOMAIN_CONTEXT || 'No domain context available';
                  }
                });
              }

              // Get optimal context for the generation task
              const task = 'Create {% raw %}${{ inputs.component_type }}{% endraw %} named {% raw %}${{ inputs.component_name }}{% endraw %} in {% raw %}${{ inputs.domain_name }}{% endraw %} domain with requirements: {% raw %}${{ inputs.requirements }}{% endraw %}';
              const context = await manager.getOptimalContext(task);

              console.log('Context gathered:', context.tokenCount, 'tokens');
              console.log('Relevance score:', context.relevanceScore);

              // Save context for next step
              fs.writeFileSync('ai-context.json', JSON.stringify(context, null, 2));
            }

            generateComponent().catch((e) => { console.error(e); process.exit(1); });
          "
      - name: Generate Code using Nx Generator
        run: |
          # Use the existing domain generator with AI-enhanced context
          TARGET_PATH="libs/{% raw %}${{ inputs.domain_name }}{% endraw %}"

          # Select generator based on component type at runtime
          case "{% raw %}${{ inputs.component_type }}{% endraw %}" in
            entity)
              pnpm exec nx generate @vibes/ddd:domain-entity \
                --name="{% raw %}${{ inputs.component_name }}{% endraw %}" \
                --domain="{% raw %}${{ inputs.domain_name }}{% endraw %}" \
                --skipTests={% raw %}${{ inputs.include_tests == false }}{% endraw %} \
                --skipDocs={% raw %}${{ inputs.include_docs == false }}{% endraw %}
              ;;
            value-object)
              pnpm exec nx generate @vibes/ddd:value-object \
                --name="{% raw %}${{ inputs.component_name }}{% endraw %}" \
                --domain="{% raw %}${{ inputs.domain_name }}{% endraw %}" \
                --skipTests={% raw %}${{ inputs.include_tests == false }}{% endraw %} \
                --skipDocs={% raw %}${{ inputs.include_docs == false }}{% endraw %}
              ;;
            service)
              pnpm exec nx generate @vibes/ddd:domain-service \
                --name="{% raw %}${{ inputs.component_name }}{% endraw %}" \
                --domain="{% raw %}${{ inputs.domain_name }}{% endraw %}" \
                --skipTests={% raw %}${{ inputs.include_tests == false }}{% endraw %} \
                --skipDocs={% raw %}${{ inputs.include_docs == false }}{% endraw %}
              ;;
            use-case)
              pnpm exec nx generate @vibes/ddd:use-case \
                --name="{% raw %}${{ inputs.component_name }}{% endraw %}" \
                --domain="{% raw %}${{ inputs.domain_name }}{% endraw %}" \
                --skipTests={% raw %}${{ inputs.include_tests == false }}{% endraw %} \
                --skipDocs={% raw %}${{ inputs.include_docs == false }}{% endraw %}
              ;;
            *)
              echo "Unknown component type: {% raw %}${{ inputs.component_type }}{% endraw %}"
              exit 1
              ;;
          esac

      - name: Apply AI Enhancements
        env:
          OPENAI_API_KEY: {% raw %}${{ secrets.OPENAI_API_KEY }}{% endraw %}
        run: |
          # Apply AI-generated improvements to the base generated code
          node -e "
            try {
              const fs = require('fs');
              const path = require('path');

              // Load AI context from previous step
              const context = JSON.parse(fs.readFileSync('ai-context.json', 'utf8'));

              console.log('Applying AI enhancements...');
              console.log('Context relevance:', context.relevanceScore);
              console.log('Sources used:', context.sources.map(s => s.id).join(', '));

              // Here we would apply AI-specific enhancements
              // For now, just log the enhancement process
              console.log('AI enhancements applied successfully');
            } catch (error) {
              console.log('AI enhancements not available, skipping enhancement step');
              process.exit(0);
            }
          "

      - name: Validate Generated Code
        run: |
          # Run type checking and linting on generated code
          pnpm run type-check
          pnpm run lint:fix

          {% if include_tests %}
          # Run tests to ensure generated code works
          pnpm run test -- --testPathPattern="{% raw %}${{ inputs.domain_name }}{% endraw %}/.*{% raw %}${{ inputs.component_name }}{% endraw %}"
          {% endif %}

      - name: Record AI Learning Data
        run: |
          # Store generation metrics in temporal database for learning
          node -e "
            const fs = require('fs');

            const metrics = {
              timestamp: new Date().toISOString(),
              componentType: '{% raw %}${{ inputs.component_type }}{% endraw %}',
              domain: '{% raw %}${{ inputs.domain_name }}{% endraw %}',
              componentName: '{% raw %}${{ inputs.component_name }}{% endraw %}',
              requirements: '{% raw %}${{ inputs.requirements }}{% endraw %}',
              success: true, // We'll enhance this with actual validation
              contextTokens: JSON.parse(fs.readFileSync('ai-context.json', 'utf8')).tokenCount,
              relevanceScore: JSON.parse(fs.readFileSync('ai-context.json', 'utf8')).relevanceScore
            };

            console.log('Recording AI metrics:', JSON.stringify(metrics, null, 2));
            // TODO: Store in temporal database once MERGE-TASK-006 is complete
          "

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
          commit-message: |
            feat({% raw %}${{ inputs.domain_name }}{% endraw %}): add AI-generated {% raw %}${{ inputs.component_type }}{% endraw %} {% raw %}${{ inputs.component_name }}{% endraw %}

            Generated using AI-enhanced workflow with:
            - Component Type: {% raw %}${{ inputs.component_type }}{% endraw %}
            - Domain: {% raw %}${{ inputs.domain_name }}{% endraw %}
            - Requirements: {% raw %}${{ inputs.requirements }}{% endraw %}

            Implements: MERGE-TASK-007 (AI Context Management)
          title: 'AI Generated: {% raw %}${{ inputs.component_type }}{% endraw %} {% raw %}${{ inputs.component_name }}{% endraw %} in {% raw %}${{ inputs.domain_name }}{% endraw %} domain'
          body: |
            ## AI-Generated Component

            This PR contains an AI-generated **{% raw %}${{ inputs.component_type }}{% endraw %}** component created using the VibePDK AI-enhanced workflow.

            ### Component Details
            - **Type**: {% raw %}${{ inputs.component_type }}{% endraw %}
            - **Name**: {% raw %}${{ inputs.component_name }}{% endraw %}
            - **Domain**: {% raw %}${{ inputs.domain_name }}{% endraw %}
            - **Requirements**: {% raw %}${{ inputs.requirements }}{% endraw %}

            ### AI Generation Metrics
            - **Tests Included**: {% raw %}${{ inputs.include_tests }}{% endraw %}
            - **Documentation Included**: {% raw %}${{ inputs.include_docs }}{% endraw %}

            ### Validation Status
            - [ ] Type checking passed
            - [ ] Linting passed
            - [ ] Tests passed (if included)
            - [ ] Architecture compliance verified

            ### Next Steps
            1. Review the generated code for business logic accuracy
            2. Ensure domain rules are properly implemented
            3. Verify test coverage meets requirements
            4. Update any integration points if needed

            ---
            *This component was generated using VibePDK's AI-enhanced development workflow (MERGE-TASK-007)*
          branch: feature/ai-generated-{% raw %}${{ inputs.component_type }}{% endraw %}-{% raw %}${{ inputs.component_name }}{% endraw %}
          delete-branch: true

      - name: Update AI Learning Database
        if: success()
        run: |
          echo "Successful generation recorded for future AI learning"
          # TODO: Update temporal database with success metrics
          # This will be implemented when MERGE-TASK-006 (Temporal Database) is complete

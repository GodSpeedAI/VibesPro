{# Spec guard workflow template #}
name: Spec Guard

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  spec-guard:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Validate specs & prompts
        run: |
          just spec-guard || true

# Spec Guard CI - Automated Specification and Quality Validation
#
# This workflow enforces specification-driven development by validating:
# - Traceability matrix completeness (spec:matrix)
# - Prompt file quality and token budgets (prompt:lint)
# - Template generation integrity (test-generation)
# - Markdown quality and link validity
# - Unit test coverage
#
# Environment Variables:
# - PROMPT_TOKENIZER: Set to 'accurate' for precise token counting (default: budget estimator)
# - NODE_ENV: Set to 'test' during CI runs
#
# Traceability: AI_ADR-005, AI_PRD-005, AI_SDS-004, AI_TS-003, AI_TS-004, AI_TS-005

name: Spec Guard CI

on:
  pull_request:
  push:
    branches: [main]

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: "20"

      - name: Setup Just
        uses: ./.github/actions/setup-just

      - name: Run Spec Guard bundle
        run: just spec-guard

      - name: Upload environment report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: environment-report
          path: docs/environment_report.md
      - name: Build PR comment
        if: github.event_name == 'pull_request'
        run: pnpm run pr:comment
      - name: Upsert PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b # v7.1.0
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const body = fs.readFileSync(path.join(process.cwd(), '.tmp', 'pr_comment.md'), 'utf8');
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            // Find existing comment by marker
            const marker = '<!-- vibePDK-spec-guard:summary -->';
            const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number, per_page: 100 });
            const prior = comments.find(c => c.body && c.body.includes(marker));
            if (prior) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: prior.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number, body });
            }

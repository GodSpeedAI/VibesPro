set shell := ["bash", "-uc"]

# Auto-detect build strategy
default: (_detect_build_system)

# Build all projects
build:
    @echo "Building {{ project_name }}..."
    {% if architecture_style == "hexagonal" %}
    pnpm nx run-many --target=build --all --parallel=3
    {% else %}
    pnpm build
    {% endif %}

# Test all projects
test:
    @echo "Testing {{ project_name }}..."
    @if [ -f "nx.json" ]; then \
        pnpm nx run-many --target=test --all --parallel=3; \
    else \
        pnpm test --if-present; \
    fi

# Lint all projects
lint:
    @echo "Linting {{ project_name }}..."
    @if [ -f "nx.json" ]; then \
        pnpm nx run-many --target=lint --all; \
    else \
        pnpm lint --if-present; \
    fi

# Development server
dev:
    @echo "Starting development server for {{ project_name }}..."
    @if [ -f "nx.json" ]; then \
        pnpm nx run-many --target=serve --all --parallel=5; \
    else \
        pnpm dev --if-present || pnpm start --if-present; \
    fi

spec-matrix:
    pnpm spec:matrix

prompt-lint:
    pnpm prompt:lint

# Setup project
setup:
    @echo "Setting up {{ project_name }}..."
    pnpm install
    {% if include_ai_workflows == true %}
    just setup-ai
    {% endif %}

{% if include_ai_workflows == true %}
# Setup AI workflows
setup-ai:
    @echo "Setting up AI workflows..."
    python3 tools/temporal-db/init.py

# Initialize temporal database
db-init:
    python3 tools/temporal-db/init.py

# Backup temporal database
db-backup:
    python3 tools/temporal-db/backup.py

# Customize copilot instructions interactively
customize-instructions:
    @echo "ü§ñ Interactive Copilot Instructions Customization"
    @echo "=================================================="
    @echo ""
    @echo "This will guide you through customizing .github/copilot-instructions.md"
    @echo "for your project. Answer questions about your:"
    @echo "  - Project type and tech stack"
    @echo "  - Architecture and domain"
    @echo "  - Team size and development practices"
    @echo "  - Testing, security, and deployment approaches"
    @echo ""
    @echo "You can also use the 'meta.customize-instructions' chat mode in VS Code."
    @echo ""
    @echo "Press Enter to continue when ready..."
    @read
    @echo ""
    @echo "Opening .github/prompts/customize.copilot-instructions.prompt.md..."
    @echo "Please use this prompt in your AI chat (GitHub Copilot or VS Code chat)."
    @echo ""
    @cat .github/prompts/customize.copilot-instructions.prompt.md

# --- AI Workflow Recipes ---
# Traceability: AI_ADR-004, AI_PRD-003, AI_SDS-003, AI_TS-004
#
# These recipes support AI-assisted development workflows as defined in:
# - .github/instructions/ai-workflows.instructions.md
# - .github/chatmodes/ (tdd.*, debug.*)
# - .github/prompts/ (TDD and debug workflow prompts)
#
# All recipes are safe to run in any environment and degrade gracefully
# when dependencies (pnpm, Nx) are not available.

# Bundle AI context for Copilot chat modes
# Collects specs, CALM architecture, and techstack into docs/ai_context_bundle
# for reference by .github/chatmodes/*.chatmode.md files
ai-context-bundle:
	@echo "üì¶ Bundling AI context..."
	@bash scripts/bundle-context.sh docs/ai_context_bundle
	@echo "‚úÖ Context bundle ready at docs/ai_context_bundle"

# --- TDD Workflow (Red-Green-Refactor) ---
# Usage: Open corresponding chat mode and follow the workflow
# Context: Reference docs/ai_context_bundle for project context

tdd-red:
	@echo "üî¥ Red Phase: Write failing tests from specs."
	@echo ""
	@echo "Next steps:"
	@echo "  1. Open chat mode: tdd.red"
	@echo "  2. Reference docs/ai_context_bundle"
	@echo "  3. Write failing tests that define expected behavior"
	@echo ""

tdd-green:
	@echo "üü¢ Green Phase: Implement minimal code to pass tests."
	@echo ""
	@echo "Next steps:"
	@echo "  1. Open chat mode: tdd.green"
	@echo "  2. Reference docs/ai_context_bundle"
	@echo "  3. Write minimal implementation to make tests pass"
	@echo ""

tdd-refactor:
	@echo "‚ôªÔ∏è  Refactor Phase: Improve design while keeping tests green."
	@echo ""
	@echo "Next steps:"
	@echo "  1. Open chat mode: tdd.refactor"
	@echo "  2. Reference docs/ai_context_bundle"
	@echo "  3. Optimize code without changing behavior"
	@echo ""

# --- Debug Workflow (Start-Repro-Isolate-Fix-Refactor-Regress) ---
# Usage: Open corresponding chat mode and follow the workflow
# Context: Reference docs/ai_context_bundle for project context

debug-start:
	@echo "üêõ Debug Start: Normalize bug report and plan reproduction."
	@echo ""
	@echo "Next steps:"
	@echo "  1. Open chat mode: debug.start"
	@echo "  2. Reference docs/ai_context_bundle"
	@echo "  3. Document the bug and plan reproduction"
	@echo ""

debug-repro:
	@echo "üêõ Debug Repro: Write failing test to reproduce the issue."
	@echo ""
	@echo "Next steps:"
	@echo "  1. Open chat mode: debug.repro"
	@echo "  2. Reference docs/ai_context_bundle"
	@echo "  3. Create minimal reproduction test"
	@echo ""

debug-isolate:
	@echo "üêõ Debug Isolate: Narrow root cause using diffs/instrumentation."
	@echo ""
	@echo "Next steps:"
	@echo "  1. Open chat mode: debug.isolate"
	@echo "  2. Reference docs/ai_context_bundle"
	@echo "  3. Add logging/instrumentation to find root cause"
	@echo ""

debug-fix:
	@echo "üêõ Debug Fix: Apply minimal change to make tests pass."
	@echo ""
	@echo "Next steps:"
	@echo "  1. Open chat mode: debug.fix"
	@echo "  2. Reference docs/ai_context_bundle"
	@echo "  3. Implement minimal fix for the issue"
	@echo ""

debug-refactor:
	@echo "‚ôªÔ∏è  Debug Refactor: Clean up the fix and remove instrumentation."
	@echo ""
	@echo "Next steps:"
	@echo "  1. Open chat mode: debug.refactor"
	@echo "  2. Reference docs/ai_context_bundle"
	@echo "  3. Improve fix quality and remove debug code"
	@echo ""

debug-regress:
	@echo "üß™ Debug Regress: Run full regression to ensure stability."
	@echo ""
	@echo "Next steps:"
	@echo "  1. Open chat mode: debug.regress"
	@echo "  2. Reference docs/ai_context_bundle"
	@echo "  3. Verify no regressions were introduced"
	@echo ""

# --- AI Validation & Scaffolding ---

# Validate code quality using available tooling
# Safe to run: degrades gracefully if pnpm or Nx are not available
# Runs: AGENT link checker, pre-commit, lint, typecheck, and tests (if configured)
ai-validate:
	@echo "üîç Validating project..."
	@echo "Running AGENT.md link checker..."
	@python3 tools/check_agent_links.py || true
	@echo "Running pre-commit hooks..."
	@if command -v pre-commit > /dev/null 2>&1; then \
		pre-commit run --all-files || true; \
	else \
		echo "‚ö†Ô∏è  pre-commit not found. Skipping pre-commit hooks."; \
	fi
	@if command -v pnpm > /dev/null 2>&1; then \
		if [ -f package.json ] && grep -q '"lint"' package.json; then \
			echo "Running lint..."; \
			pnpm run lint || true; \
		else \
			echo "‚ö†Ô∏è  No 'lint' script found in package.json. Skipping lint."; \
		fi; \
		if [ -f package.json ] && grep -q '"typecheck"' package.json; then \
			echo "Running typecheck..."; \
			pnpm run typecheck || true; \
		else \
			echo "‚ö†Ô∏è  No 'typecheck' script found in package.json. Skipping typecheck."; \
		fi; \
		if pnpm exec nx --version > /dev/null 2>&1; then \
			echo "Running tests..."; \
			pnpm exec nx run-many --target=test --all || true; \
		else \
			echo "‚ö†Ô∏è  Nx not available or no projects to test."; \
		fi; \
	else \
		echo "‚ö†Ô∏è  pnpm not found. Skipping validation."; \
		echo "Run 'just setup' to install dependencies."; \
	fi
	@echo "‚úÖ Validation complete"

# Scaffold new code using Nx generators
# Thin wrapper around 'nx generate' with helpful error messages
# Usage: just ai-scaffold name=@nx/js:lib
ai-scaffold name="":
	@if [ -z "{{name}}" ]; then \
		echo "Usage: just ai-scaffold name=<generator>"; \
		echo ""; \
		echo "Examples:"; \
		echo "  just ai-scaffold name=@nx/js:lib"; \
		echo "  just ai-scaffold name=@nx/react:component"; \
		echo ""; \
		exit 1; \
	else \
		if command -v pnpm > /dev/null 2>&1; then \
			echo "üèóÔ∏è  Running: pnpm exec nx g {{name}}"; \
			pnpm exec nx g {{name}}; \
		else \
			echo "‚ùå pnpm not found."; \
			echo "Please run: just setup"; \
			exit 1; \
		fi; \
	fi

# --- Documentation Generation ---
docs-generate PROJECT_NAME="{{ project_name }}":
	@echo "üìö Generating comprehensive documentation..."
	@if [ -f cli/docs.js ]; then \
		node cli/docs.js generate \
			--project-name "{{PROJECT_NAME}}" \
			--description "Modern application with hexagonal architecture and domain-driven design" \
			--domains core,user,billing \
			--frameworks next,fastapi \
			--output-dir docs/generated \
			--include-ai; \
	else \
		echo "‚ö†Ô∏è  cli/docs.js not found. Skipping documentation generation."; \
	fi

docs-templates PROJECT_NAME="{{ project_name }}" OUTPUT_DIR="docs":
	@echo "üìù Generating documentation templates..."
	@if [ -f cli/docs.js ]; then \
		node cli/docs.js templates \
			--project-name "{{PROJECT_NAME}}" \
			--domains core,user,billing \
			--frameworks next,fastapi \
			--output-dir "{{OUTPUT_DIR}}" \
			--include-ai; \
	else \
		echo "‚ö†Ô∏è  cli/docs.js not found. Skipping documentation templates."; \
	fi

docs-validate:
	@echo "üß™ Validating documentation..."
	@if [ -f cli/docs.js ]; then \
		node cli/docs.js validate \
			--output-dir docs/generated; \
	else \
		echo "‚ö†Ô∏è  cli/docs.js not found. Skipping documentation validation."; \
	fi

docs-serve PORT="8000":
	@echo "üìö Serving documentation on port {{PORT}}..."
	@if [ -d docs/generated ]; then \
		python3 -m http.server {{PORT}} -d docs/generated; \
	else \
		echo "‚ö†Ô∏è  docs/generated directory not found. Run 'just docs-generate' first."; \
	fi

docs-clean:
	@echo "üßπ Cleaning generated documentation..."
	rm -rf docs/generated docs/temp
	@echo "‚úÖ Documentation cleaned"

{% endif %}

_detect_build_system:
   #!/usr/bin/env bash
   if [ -f "nx.json" ]; then
      just build
   else
      pnpm build
   fi

# Agent Instructions & Guiding Principles

This document provides essential instructions for AI agents operating within the **{{ project_slug }}** project. This project was generated by VibePDK and adheres to a strict, spec-driven development methodology. Adherence to these principles is critical for maintaining its integrity, quality, and traceability.

## Core Principles

1.  **Spec-Driven First**: All changes must originate from a specification. Before implementing, you must understand the relevant artifacts (PRD, SDS, TS) and their IDs. If a spec is missing, your first task is to create one.
2.  **Traceability is Mandatory**: Every commit, file, and test must be traceable to a spec ID. Use the `matrix_ids` frontmatter in all spec-related documents and reference spec IDs in commit messages.
3.  **TDD is the Standard**: Follow a strict Red-Green-Refactor TDD cycle for all functional changes. A failing test (`RED`) must be written before implementation (`GREEN`).
4.  **Adhere to the Constitution**: All contributions must align with the project's "Constitution" (see `.github/instructions/ai-workflows.constitution.instructions.md`), which prioritizes simplicity, clarity, and minimal dependencies.
5.  **Use the Provided Tooling**: All workflows (scaffolding, linting, testing) must be executed through the `justfile` recipes. Do not invoke `pnpm`, `nx`, or `bash` scripts directly unless a `just` recipe does not exist.
6.  **Use Context7 , Exa Search and Relevant Documentation**: Leverage the Context7 plugin to access project documentation, specs, and code context. Always refer to the latest documents in the `/docs` directory for guidance.

## Primary Workflow: The Spec-Plan-Tasks Cycle

Any significant change must follow this phased workflow:

1.  **`spec-feature`**: Begin by scaffolding a feature specification.
    -   **Command**: `just spec-feature THREAD=<feature-slug>`
    -   **Outcome**: Creates `/docs/specs/<feature-slug>/spec.md`. Define the "what" and "why" here.

2.  **`spec-plan`**: Generate a detailed implementation plan from the feature spec.
    -   **Command**: `just spec-plan THREAD=<feature-slug> FAMILY=<adr|prd|sds|ts|task>`
    -   **Outcome**: Creates `/docs/specs/<feature-slug>/plan.<family>.md`. This is where you outline the TDD cycles, file changes, and validation steps.

3.  **`spec-tasks`**: Create a numbered list of discrete, executable tasks from the plan.
    -   **Command**: `just spec-tasks THREAD=<feature-slug>`
    -   **Outcome**: Creates `/docs/specs/<feature-slug>/tasks.md`. Each task should be a single, verifiable step.

4.  **Implementation**: Execute the tasks using TDD. Write failing tests, then write the code to make them pass.

## Working with the Codebase

-   **Languages & Frameworks**: Refer to the `techstack.yaml` file for the authoritative list of technologies used in this project.
-   **Dependencies**: Do not add a new dependency without a formal ADR.
-   **Prompts & Instructions**: When modifying AI workflows, update the corresponding files in `.github/prompts`, `.github/chatmodes`, or `.github/instructions`. Ensure they are linted with `just prompt-lint`.

## Committing Changes

-   **Format**: Follow the Conventional Commits specification.
-   **Traceability**: The commit message body **must** reference the spec ID(s) it implements (e.g., `Implements: PRD-010, TS-004`).
-   **Scope**: Commits should be atomic and address a single task from `tasks.md`.

## Avoiding Technical Debt

-   **No Shortcuts**: Do not bypass the spec-driven workflow or TDD cycles.
-   **Refactor Continuously**: The "Refactor" step of the TDD cycle is not optional. Leave the code cleaner than you found it.
-   **Validate Everything**: Before committing, run `just prompt-lint`, `just spec-matrix`, and all relevant tests to ensure your changes are valid and do not introduce regressions.

#!/usr/bin/env python3
"""
HexDDD Project Migration Tool

Migrates existing HexDDD projects to the merged Copier template format.
Based on MERGE-TASK-008 specification.
"""

from __future__ import annotations

import json
import shutil
import subprocess
from pathlib import Path
from typing import Dict, List, Optional, Mapping, Sequence


class HexDDDMigrator:
    """Migrates HexDDD projects to merged format."""

    def __init__(self, source_path: str | Path):
        self.source_path = Path(source_path)
        self.migration_log: List[str] = []

    def analyze_project(self) -> Dict[str, object]:
        """Analyze the existing HexDDD project structure."""
        analysis = {
            "has_nx_config": (self.source_path / "nx.json").exists(),
            "has_workspace_json": (self.source_path / "workspace.json").exists(),
            "generators": self._find_generators(),
            "domains": self._find_domains(),
            "custom_code": self._find_custom_code(),
        }
        return analysis

    def migrate(self, target_path: str | Path) -> Dict[str, object]:
        """Execute the migration process."""
        target_path = Path(target_path)

        try:
            # Create target directory
            target_path.mkdir(parents=True, exist_ok=True)

            # Copy and convert core configurations
            self._migrate_nx_config(target_path)
            self._migrate_generators(target_path)
            self._migrate_domain_code(target_path)
            self._create_copier_config(target_path)

            return {
                "success": True,
                "migratedFiles": self._get_migrated_files(target_path),
                "preservedConfig": ["nx.json", "workspace.json"],
                "migrationLog": self.migration_log
            }

        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "migrationLog": self.migration_log
            }

    def _find_generators(self) -> List[str]:
        """Find existing Nx generators in the project."""
        generators = []
        generators_dir = self.source_path / "libs" / "ddd" / "src" / "generators"

        if generators_dir.exists():
            for item in generators_dir.iterdir():
                if item.is_dir() and (item / "index.ts").exists():
                    generators.append(item.name)

        return generators

    def _find_domains(self) -> List[str]:
        """Find existing domain libraries."""
        domains = []
        libs_dir = self.source_path / "libs"

        if libs_dir.exists():
            for item in libs_dir.iterdir():
                if item.is_dir() and (item / "domain").exists():
                    domains.append(item.name)

        return domains

    def _find_custom_code(self) -> List[str]:
        """Find custom implementations to preserve."""
        custom_files = []

        # Look for custom entity implementations
        for domain_path in (self.source_path / "libs").glob("*/domain/entities/*.ts"):
            if not domain_path.name.endswith(".spec.ts"):
                custom_files.append(str(domain_path.relative_to(self.source_path)))

        return custom_files

    def _migrate_nx_config(self, target_path: Path) -> None:
        """Copy and adapt Nx configuration."""
        nx_config_path = self.source_path / "nx.json"

        if nx_config_path.exists():
            with open(nx_config_path) as f:
                nx_config = json.load(f)

            # Adapt for Copier template context
            adapted_config = self._adapt_nx_config(nx_config)

            target_nx_path = target_path / "nx.json.j2"
            with open(target_nx_path, "w") as f:
                json.dump(adapted_config, f, indent=2)

            self.migration_log.append(f"Migrated nx.json -> nx.json.j2")

    def _migrate_generators(self, target_path: Path) -> None:
        """Convert Nx generators to Copier templates."""
        generators_source = self.source_path / "libs" / "ddd" / "src" / "generators"
        generators_target = target_path / "generators"

        if generators_source.exists():
            shutil.copytree(generators_source, generators_target, dirs_exist_ok=True)
            self.migration_log.append(f"Copied generators to {generators_target}")

    def _migrate_domain_code(self, target_path: Path) -> None:
        """Preserve existing domain implementations."""
        libs_source = self.source_path / "libs"
        libs_target = target_path / "libs"

        if libs_source.exists():
            shutil.copytree(libs_source, libs_target, dirs_exist_ok=True)
            self.migration_log.append(f"Preserved domain code in {libs_target}")

    def _create_copier_config(self, target_path: Path) -> None:
        """Create Copier configuration based on project analysis."""
        analysis = self.analyze_project()

        copier_config = {
            "project_name": {
                "type": "str",
                "help": "Name of your project",
                "default": self.source_path.name
            },
            "architecture_style": {
                "type": "str",
                "help": "Architecture pattern",
                "choices": ["hexagonal", "layered", "microservices"],
                "default": "hexagonal"
            },
            "migrate_from_hexddd": {
                "type": "bool",
                "help": "This project was migrated from HexDDD",
                "default": True
            }
        }

        copier_path = target_path / "copier.yml"
        with open(copier_path, "w") as f:
            json.dump(copier_config, f, indent=2)

        self.migration_log.append("Created copier.yml configuration")

    def _adapt_nx_config(self, config: Mapping[str, object]) -> Dict[str, object]:
        """Adapt Nx configuration for template use."""
        # Replace hardcoded values with template variables
        config_str = json.dumps(config)
        config_str = config_str.replace(
            self.source_path.name, "{{project_slug}}"
        )

        return json.loads(config_str)

    def _get_migrated_files(self, target_path: Path) -> List[str]:
        """Get list of migrated files."""
        migrated_files = []

        for file_path in target_path.rglob("*"):
            if file_path.is_file():
                migrated_files.append(str(file_path.relative_to(target_path)))

        return migrated_files


def main():
    """CLI entry point for migration tool."""
    import argparse

    parser = argparse.ArgumentParser(description="Migrate HexDDD project to merged format")
    parser.add_argument("source", help="Path to HexDDD project")
    parser.add_argument("target", help="Target path for migrated project")
    parser.add_argument("--dry-run", action="store_true", help="Analyze only, don't migrate")

    args = parser.parse_args()

    migrator = HexDDDMigrator(args.source)

    if args.dry_run:
        analysis = migrator.analyze_project()
        print("Project Analysis:")
        print(json.dumps(analysis, indent=2))
    else:
        result = migrator.migrate(args.target)
        if result["success"]:
            print(f"Migration successful! Migrated {len(result['migratedFiles'])} files.")
        else:
            print(f"Migration failed: {result['error']}")


if __name__ == "__main__":
    main()

[project]
name = "{{project_slug}}"
version = "0.1.0"
description = "{{project_name}} - AI-enhanced development platform"
authors = [
    {name = "{{author_name}}", email = "{{author_email}}"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"

[project.urls]
Homepage = "https://github.com/{{author_username}}/{{project_slug}}"
Repository = "https://github.com/{{author_username}}/{{project_slug}}.git"
Documentation = "https://github.com/{{author_username}}/{{project_slug}}#readme"
"Bug Tracker" = "https://github.com/{{author_username}}/{{project_slug}}/issues"

[tool.uv]
dev-dependencies = [
    "pytest==7.4.3",
    "pytest-asyncio==0.21.1",
    "pytest-cov==4.1.0",
    "black==23.11.0",
    "isort==5.12.0",
    "ruff==0.1.15",
    "flake8==6.1.0",
    "mypy==1.7.1",
    "pre-commit==3.5.0",
]
requires-python = ">=3.11"
index-url = "https://pypi.org/simple"
extra-index-url = []

[project.dependencies]
# Core web framework
fastapi = "==0.104.1"
uvicorn = {extras = ["standard"], version = "==0.24.0"}
pydantic = "==2.5.2"
sqlalchemy = "==2.0.23"
alembic = "==1.13.1"
pydantic-settings = "==2.1.0"
python-multipart = "==0.0.6"
python-jose = {extras = ["cryptography"], version = "==3.3.0"}
passlib = {extras = ["bcrypt"], version = "==1.7.4"}

# Database drivers
{% if database_type == "postgresql" %}
psycopg2-binary = "==2.9.9"
{% elif database_type == "mysql" %}
pymysql = "==1.1.0"
{% elif database_type == "sqlite" %}
aiosqlite = "==0.19.0"
{% endif %}

# Optional integrations
{% if include_supabase %}
supabase = "==2.0.4"
{% endif %}

{% if enable_temporal_learning %}
tsink = "==0.1.0"  # Temporal database for specifications
{% endif %}

[project.optional-dependencies]
dev = [
    "pytest==7.4.3",
    "pytest-asyncio==0.21.1",
    "pytest-cov==4.1.0",
    "black==23.11.0",
    "isort==5.12.0",
    "ruff==0.1.15",
    "flake8==6.1.0",
    "mypy==1.7.1",
    "pre-commit==3.5.0",
]
ai = [
    "openai==1.3.7",
    "anthropic==0.7.8",
    "tiktoken==0.5.2",
    "langchain==0.1.0",
    "chromadb==0.4.18",
]
testing = [
    "httpx==0.25.2",
    "faker==20.1.0",
    "factory-boy==3.3.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | node_modules
)/
[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["{{project_slug|replace('-', '_')}}"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.coverage.run]
source = ["{{project_slug|replace('-', '_')}}"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]

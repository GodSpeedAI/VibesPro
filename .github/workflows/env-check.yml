name: env-check

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

concurrency:
  group: env-check-${{ github.ref }}
  cancel-in-progress: true

jobs:
  env-check:
    runs-on: ubuntu-latest
    env:
      MISE_NONINTERACTIVE: "1"
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
      IS_FORK: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository }}
      SOPS_LOADED: "false"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system packages (age, jq, make)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends age jq make

      - name: Install just
        run: |
          # Attempt official installer then fallback to apt; do not fail the job on installer network issues
          set -euo pipefail
          if curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/local/bin; then
            sudo chmod +x /usr/local/bin/just
          else
            echo "just installer failed; attempting apt fallback"
            sudo apt-get update || true
            sudo apt-get install -y just || echo "could not install just; continuing without just"
          fi
          just --version || true

      - name: Install SOPS
        run: |
          SOPS_VERSION="3.9.3"
          SOPS_CHECKSUM="835ee92ef7269e1e40d69cbe5e1042975f3cd38044e8a0fa3c1a13543b7dcfaa"
          curl -LO "https://github.com/getsops/sops/releases/download/v${SOPS_VERSION}/sops-v${SOPS_VERSION}.linux.amd64"
          echo "${SOPS_CHECKSUM}  sops-v${SOPS_VERSION}.linux.amd64" | sha256sum -c -
          sudo mv "sops-v${SOPS_VERSION}.linux.amd64" /usr/local/bin/sops
          sudo chmod +x /usr/local/bin/sops
          sops --version

      - name: Install Devbox
        run: |
          curl -fsSL https://get.jetpack.io/devbox | bash -s -- -f
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          devbox version

      - name: Install mise
        run: |
          curl https://mise.run | bash
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          mise --version

      - name: Install Vector
        run: |
          curl --proto '=https' --tlsv1.2 -sSfL https://sh.vector.dev | sudo bash -s -- -y --prefix /usr/local
          vector --version

      - name: Trust mise config
        run: mise trust --yes .mise.toml

      - name: Cache Vector binary
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/vector
          key: vector-${{ runner.os }}-${{ hashFiles('ops/vector/vector.toml') }}
          restore-keys: |
            vector-${{ runner.os }}-

      - name: Cache mise runtimes
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/mise
            ~/.cache/mise
          key: mise-${{ runner.os }}-${{ hashFiles('.mise.toml') }}
          restore-keys: |
            mise-${{ runner.os }}-

      - name: Install runtimes (Node/Python/Rust via mise)
        run: mise install

      - name: Validate Vector config
        run: |
          echo "Validating Vector configuration..."
          # Ensure expected data directories exist so `vector validate` doesn't fail
          # Vector config uses paths like `tmp/vector-data` relative to repo root,
          # so create both locations to be safe (repo-root tmp/ and ops/vector/tmp/).
          mkdir -p tmp/vector-data ops/vector/tmp/vector-data
          vector validate ops/vector/vector.toml
          echo "âœ… Vector config valid"

      - name: Ops smoke test (stdout + OTLP)
        # Run under bash so `set -o pipefail` in the script is supported
        run: bash -eux -o pipefail tests/ops/test_observe_smoke.sh

      - name: Crate tests (no otlp)
        run: cargo test --manifest-path crates/vibepro-observe/Cargo.toml

      - name: Crate tests (otlp feature)
        run: cargo test --manifest-path crates/vibepro-observe/Cargo.toml --features otlp

      # Optional: pnpm cache if you use pnpm (works with Node's Corepack)
      - name: Enable corepack (optional)
        run: corepack enable

      - name: Cache pnpm store (optional)
        if: hashFiles('pnpm-lock.yaml') != ''
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: pnpm-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: Decrypt secrets to ephemeral env (if provided)
        if: ${{ env.IS_FORK != 'true' }}
        run: |
          # GitHub injects secrets into the environment only for run steps; check at runtime.
          # If SOPS_AGE_KEY is not provided (e.g., PRs from forks), skip decryption gracefully
          # instead of failing the job.
          if [ -n "$SOPS_AGE_KEY" ] && [ -f .secrets.env.sops ]; then
            echo "SOPS_AGE_KEY present; attempting decryption"
            sops --input-type dotenv --output-type dotenv -d .secrets.env.sops > /tmp/ci.env
            set -a; source /tmp/ci.env; set +a
          else
            echo "No SOPS_AGE_KEY provided or .secrets.env.sops missing; skipping decryption."
          fi

      - name: SOPS status
        id: sops_status
        run: |
          if [ -f /tmp/ci.env ]; then
            echo "loaded=true" >> $GITHUB_OUTPUT
            echo "SOPS_LOADED=true" >> $GITHUB_ENV
          else
            echo "loaded=false" >> $GITHUB_OUTPUT
            echo "SOPS_LOADED=false" >> $GITHUB_ENV
          fi

      - name: Verify Node pins (mise vs Volta)
        run: |
          # Detects version conflicts between mise and Volta
          just verify-node

      - name: Install dependencies
        # Adjust to your project (pnpm, uv, poetry, cargo, etc.)
        run: |
          if [ -f pnpm-lock.yaml ]; then pnpm install --frozen-lockfile; fi
          if [ -f uv.lock ] || [ -f pyproject.toml ]; then uv sync --frozen || true; fi

      - name: Build
        run: just build

      - name: Test
        run: just test

      - name: Cleanup secrets
        if: always()
        run: rm -f /tmp/ci.env
